#program1
def astaralgo(startNode , endNode):
  openset=set(startNode)
  closeset=set()
  g={}
  parents={}
  g[startNode]=0
  parents[startNode]=startNode
  while len(openset)>0:
    n=None
    for v in openset:
      if n==None or g[v]+hr(v)<g[n]+hr(n):
        n=v
    if n == endNode or Graph_Nodes[n]==None:
      pass
    else :
      for (m, weights) in getNeighbors(n):
        if m not in closeset and m not in openset:
          g[m]=g[n]+weights
          openset.add(m)
          parents[m]=n
        else:
          if g[m]> g[n]+weights:
            g[m]=g[n]+weights
            parents[m]=n
          if m in closeset:
            closeset.remove(m)
            openset.add(m)
    if n==None:
      print('path does not exist')
      return None
    if n==endNode:
      path=[]
      while parents[n]!=n:
        path.append(n)
        n=parents[n]
      path.append(startNode)
      path.reverse()
      print('Path found {}'.format(path))
      return path
    openset.remove(n)
    closeset.add(n)
  print('No path')
  return None
def getNeighbors(n):
  if n in Graph_Nodes:
    return Graph_Nodes[n]
  else:
    return None
def hr(n):
    H_dist = {
        'A': 10,
        'B': 8,
        'C': 5,
        'D': 7,
        'E': 3,
        'F': 6,
        'G': 5,
        'H': 3,
        'I': 1,
        'J': 0
    }

    return H_dist[n]
Graph_Nodes = {
    
    'A': [('B', 6), ('F', 3)],
    'B': [('C', 3), ('D', 2)],
    'C': [('D', 1), ('E', 5)],
    'D': [('C', 1), ('E', 8)],
    'E': [('I', 5), ('J', 5)],
    'F': [('G', 1),('H', 7)] ,
    'G': [('I', 3)],
    'H': [('I', 2)],
    'I': [('E', 5), ('J', 3)],

}
astaralgo('A', 'J')



      
    



